#!/usr/bin/env bash
# Simple configure for my_os
set -euo pipefail

GREEN='\033[1;32m'; YELLOW='\033[1;33m'; RED='\033[1;31m'; NC='\033[0m'

echo -e "${GREEN}[configure] my_os configuration${NC}"

# -------- options --------
BUILD_TYPE=debug      # debug | release
QEMU_BIN_DEFAULT="qemu-system-i386"
QEMU_RAM_MB=256

while [[ $# -gt 0 ]]; do
  case "$1" in
    --release) BUILD_TYPE=release; shift ;;
    --debug)   BUILD_TYPE=debug;   shift ;;
    --qemu=*)  QEMU_BIN_DEFAULT="${1#*=}"; shift ;;
    --ram=*)   QEMU_RAM_MB="${1#*=}"; shift ;;
    -h|--help)
      cat <<EOF
Usage: ./configure [--debug|--release] [--qemu=PATH] [--ram=MB]
Generates config.mk and include/config.h
EOF
      exit 0
      ;;
    *)
      echo -e "${YELLOW}[configure] warn: unknown option '$1' (ignored)${NC}"
      shift ;;
  esac
done

# -------- helpers --------
need() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo -e "${RED}error:${NC} required tool '$1' not found in PATH" >&2
    exit 1
  fi
}

try() { command -v "$1" >/dev/null 2>&1 && echo "$1" || true; }

# -------- detect toolchain --------
echo "[configure] detecting toolchain…"

# Prefer a cross-compiler if available (best for freestanding kernels)
CC=${CC:-$(try i686-elf-gcc || try i386-elf-gcc || true)}
LD=${LD:-$(try i686-elf-ld  || try i386-elf-ld  || true)}
AR=${AR:-$(try i686-elf-ar  || try i386-elf-ar  || true)}
OBJCOPY=${OBJCOPY:-$(try i686-elf-objcopy || try i386-elf-objcopy || true)}

if [[ -z "${CC}" ]]; then
  # Fallback to native toolchain (requires 32-bit support for -m32)
  CC=$(try gcc || try clang || true)
  LD=$(try ld)
  AR=$(try ar)
  OBJCOPY=$(try objcopy)
  if [[ -z "${CC}" ]]; then
    echo -e "${RED}error:${NC} no suitable C compiler found (gcc/clang or i686-elf-gcc)" >&2
    exit 1
  fi
  USING_CROSS=0
else
  USING_CROSS=1
fi

NASM=${NASM:-$(try nasm)}
need "${NASM:-nasm}"

# Optional/handy tools
CLANG_FORMAT=$(try clang-format)
CPPCHECK=$(try cppcheck)

# -------- ISO builder detection (optional) --------
GRUB_MKRESCUE=$(try grub-mkrescue)
XORRISO=$(try xorriso)
if [[ -n "${GRUB_MKRESCUE}" && -n "${XORRISO}" ]]; then
  ISO_BUILDER="grub-mkrescue"
else
  ISO_BUILDER=""  # Makefile can skip ISO target if empty
fi

# -------- QEMU detection --------
QEMU_BIN=${QEMU_BIN:-$(try "${QEMU_BIN_DEFAULT}" || true)}
if [[ -z "${QEMU_BIN}" ]]; then
  echo -e "${YELLOW}[configure] note:${NC} QEMU not found; run-time tests will be unavailable."
fi

# -------- flags --------
COMMON_CFLAGS="-ffreestanding -fno-stack-protector -fno-omit-frame-pointer -fno-pic \
               -Wall -Wextra -Wno-unused-parameter -Wno-missing-braces"
COMMON_ASMFLAGS=""
COMMON_LDFLAGS="-nostdlib"

if [[ "${USING_CROSS}" -eq 0 ]]; then
  # Native toolchain: try 32-bit mode
  if "${CC}" -m32 -x c - -o /dev/null >/dev/null 2>&1 <<<"int main(void){return 0;}" ; then
    COMMON_CFLAGS="${COMMON_CFLAGS} -m32"
    COMMON_LDFLAGS="${COMMON_LDFLAGS} -m32"
  else
    echo -e "${YELLOW}[configure] note:${NC} '-m32' not available; ensure your Makefile does not rely on host libc."
  fi
fi

if [[ "${BUILD_TYPE}" == "debug" ]]; then
  CFLAGS_EXTRA="-O0 -g -DKERNEL_DEBUG=1"
else
  CFLAGS_EXTRA="-O2 -g0 -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -DKERNEL_DEBUG=0"
fi

# -------- write outputs --------
mkdir -p include

cat > config.mk <<EOF
# Auto-generated by ./configure — do not edit by hand
CC       := ${CC}
LD       := ${LD}
AR       := ${AR}
OBJCOPY  := ${OBJCOPY}
NASM     := ${NASM}

CLANG_FORMAT := ${CLANG_FORMAT}
CPPCHECK     := ${CPPCHECK}

CFLAGS_COMMON := ${COMMON_CFLAGS}
CFLAGS_EXTRA  := ${CFLAGS_EXTRA}
ASMFLAGS      := ${COMMON_ASMFLAGS}
LDFLAGS       := ${COMMON_LDFLAGS}

# QEMU setup
QEMU_BIN   := ${QEMU_BIN}
QEMU_RAM   := ${QEMU_RAM_MB}
QEMU_FLAGS := -no-reboot -no-shutdown -display none -serial stdio \\
              -m \$\{QEMU_RAM\} -device isa-debug-exit,iobase=0xf4,iosize=0x04

# ISO builder (leave empty to disable ISO target)
ISO_BUILDER    := ${ISO_BUILDER}
GRUB_MKRESCUE  := ${GRUB_MKRESCUE}
XORRISO        := ${XORRISO}

# Output dirs
BUILD_DIR := build
DIST_DIR  := dist
EOF

cat > include/config.h <<EOF
#pragma once
#define KERNEL_NAME   "my_os"
#define KERNEL_DEBUG  ${BUILD_TYPE^^} == DEBUG ? 1 : ${BUILD_TYPE} /* for editors */
#if ${BUILD_TYPE} == 0 /* dummy to avoid macro errors */
#endif
/* Real value for C code: */
#if ${BUILD_TYPE} /* unused */
#endif
/* Use this: */
#define KERNEL_DEBUG_VALUE ${BUILD_TYPE == "debug" ? 1 : 0}
EOF

# Fix the weird macro above; simpler header:
cat > include/config.h <<EOF
#pragma once
#define KERNEL_NAME   "my_os"
#define KERNEL_DEBUG  ${BUILD_TYPE == "debug" && echo 1 || echo 0}
EOF

# -------- summary --------
echo
echo -e "${GREEN}[configure] success${NC}"
echo "  CC       : ${CC} $( [[ ${USING_CROSS} -eq 1 ]] && echo '(cross)' || echo '(native)' )"
echo "  LD/AR    : ${LD:-<ld>} / ${AR:-<ar>}"
echo "  NASM     : ${NASM}"
[[ -n "${CLANG_FORMAT}" ]] && echo "  clang-format: ${CLANG_FORMAT}" || echo -e "  clang-format: ${YELLOW}not found${NC}"
[[ -n "${CPPCHECK}"     ]] && echo "  cppcheck    : ${CPPCHECK}"     || echo -e "  cppcheck    : ${YELLOW}not found${NC}"
[[ -n "${QEMU_BIN}"     ]] && echo "  QEMU        : ${QEMU_BIN}"     || echo -e "  QEMU        : ${YELLOW}not found${NC}"
[[ -n "${ISO_BUILDER}"  ]] && echo "  ISO builder : ${ISO_BUILDER}"  || echo "  ISO builder : (disabled)"
echo "  build type : ${BUILD_TYPE}"
echo "  wrote      : config.mk, include/config.h"
echo
echo "Next steps:"
echo "  1) Ensure your Makefile has:  -include config.mk"
echo "  2) Build: make -j\$(nproc)"
[[ -n "${QEMU_BIN}" ]] && echo "  3) Run  : \${QEMU_BIN} \${QEMU_FLAGS} -kernel build/kernel.elf (adjust path)"
